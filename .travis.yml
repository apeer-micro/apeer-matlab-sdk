# We pretend to be Java because we need GNU Octave which is not 
# available (as of January 2016)
language: java

###############################################################################
cache:
  # Downloading octave takes a while, so let's cache apt
  apt: true
  directories:
    # Cache octave packages
    - $HOME/octave
    # Cache other packages
    - $HOME/external_cache

###############################################################################
# Command to install dependencies
before_install:
  # Remember the directory where our repository to test is located
  - REPOPATH="$(pwd)" && pwd
  # ---------------------------------------------------------------------------
  # Check whether we need to upgrade the gcc and g++ versions. We do need to if
  # the version is less the 4.8 and we need to install the image package from
  # Octave Forge (possibly for other packages as well).
  # For now, lets just always say we do need to do this.
  - UPGRADE_GCC="true"
  # ---------------------------------------------------------------------------
  # Add repository for octave
  - travis_retry sudo add-apt-repository -y ppa:octave/stable
  # Add repository for installing g++-4.8 on Ubuntu 12.04
  - if [ "$UPGRADE_GCC" = "true" ]; then
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
    fi
  # Update apt-get to include the contents from the new locations
  - travis_retry sudo apt-get update -qq
  # Install octave with apt-get
  - travis_retry sudo apt-get install -y octave liboctave-dev
  # Add a C++11 compiler so we can install image package
  - if [ "$UPGRADE_GCC" = "true" ]; then
      travis_retry sudo apt-get install -y gcc-4.8 g++-4.8;
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50;
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50;
    fi;
  # Check which versions of g++ and gcc we are using
  - which g++;
    g++ --version;
    which gcc;
    gcc --version;
  # ---------------------------------------------------------------------------
  # Go up one level and retrieve MOxUnit from its repository
  - cd ..;
    ls -alh;
  # Remove directory if it is already there from previous build
  - rm -rf MOxUnit;
  - git clone https://github.com/MOxUnit/MOxUnit.git
  # Install MOxUnit, which adds itself to the startup path
  - make -C MOxUnit install
  # Go back to the repository directory
  - cd ${REPOPATH}

###############################################################################
install:
  # Ensure external packages folder exists and is empty
  - rm -rf external;
    mkdir -p external;
  # Install required packages for Octave
  - if [ -f requirements-octave.txt ]; then
      mopi/mopi.sh requirements-octave.txt external "$HOME/external_cache";
    fi;
  # Install other required packages
  - if [ -f requirements.txt ]; then
      mopi/mopi.sh requirements.txt external "$HOME/external_cache";
    fi;
  # Install developmental requirements
  - if [ -f requirements-dev.txt ]; then
      mopi/mopi.sh requirements-dev.txt external "$HOME/external_cache";
    fi;
  # Before running the tests, we will have to add our package and our
  # external dependencies to the octave path
  - PACKAGE_FOLDER="src";
    ADDPATH_COMMAND="addpath(genpath(fullfile(pwd, '$PACKAGE_FOLDER')));";
    ADDPATH_COMMAND+=" addpath(genpath(fullfile(pwd, 'external')));";
    echo "ADDPATH_COMMAND| $ADDPATH_COMMAND";

###############################################################################
before_script:
  - TEST_ARGS="'-recursive', '-verbose', '-junit_xml_file', 'testresults.xml'";
    TEST_COMMAND="exit(~moxunit_runtests('tests', $TEST_ARGS));";
    echo "TEST_COMMAND| $TEST_COMMAND";
  # Double-check we are still in the right directory
  - pwd
  # Check what octave packages we have installed
  - octave -q --eval "ver"
  # ---------------------------------------------------------------------------


###############################################################################
script:
  - octave -q --eval "$ADDPATH_COMMAND $TEST_COMMAND";
  - octave -q --eval "moxunit_runtests";

###############################################################################
after_script:
  # Check where we ended up and what's going on where we are
  - pwd
  - ls -alh

archive: true